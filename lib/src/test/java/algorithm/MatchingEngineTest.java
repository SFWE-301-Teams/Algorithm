/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package algorithm;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;


// import org.junit.jupiter.api.MethodSource;
import org.junit.jupiter.params.provider.CsvFileSource;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.io.FileNotFoundException;
import java.text.SimpleDateFormat;


class MatchingEngineTest {
    private static final int NUM_SCHOLARSHIPS = 44;
    private static final int NUM_APPLICANTS = 25;

    private Scholarship[] scholarships;
    private Applicant[] applicants;

    MatchingEngineTest() throws Exception {
        scholarships = new Scholarship[NUM_SCHOLARSHIPS];
        applicants = new Applicant[NUM_APPLICANTS];

        SimpleDateFormat df = new SimpleDateFormat("MM-dd-yyyy");

        try {
            File file = new File("../../resources/ScholarshipTest.csv");
            Scanner scnr = new Scanner(file);
            String tempLine =  scnr.nextLine();
            int i = 0;

            while (scnr.hasNextLine()) {
                tempLine = scnr.nextLine();
                String[] inputs = tempLine.split(",");

                scholarships[i].setGPA(Double.parseDouble(inputs[1]));
                scholarships[i].setMajor(inputs[2]);
                scholarships[i].setMinor(inputs[3]);
                scholarships[i].setTransfer(Boolean.parseBoolean(inputs[4]));
                scholarships[i].setExpGradDate(df.parse(inputs[5]));
                scholarships[i].setAcademicYear(inputs[6]);
                scholarships[i].setEnrolledUnits(Integer.parseInt(inputs[7]));
                scholarships[i].setGender(inputs[8]);
                scholarships[i].setUSCitizenship(Boolean.parseBoolean(inputs[9]));
                scholarships[i].setScholarshipName(inputs[10]);
                scholarships[i].setDeadline(df.parse(inputs[12]));

                ++i;
            }

            scnr.close();

        }
        catch (FileNotFoundException excpt) {
            System.out.println("Error: Scholarship File Not Found");
        }

        try {
            File file = new File("../../resources/StudentTest.csv");
            Scanner scnr = new Scanner(file);
            String tempLine = scnr.nextLine();
            int i = 0;

            while (scnr.hasNextLine()) {
                tempLine = scnr.nextLine();
                String[] inputs = tempLine.split(",");

                applicants[i].setUSCitizenship(Boolean.parseBoolean(inputs[0]));
                applicants[i].setGender(inputs[1]);
                applicants[i].setStatement(inputs[2]);
                applicants[i].setStudentID(inputs[3]);
                applicants[i].setGPA(Double.parseDouble(inputs[5]));
                applicants[i].setMajors(new String[]{inputs[6]});
                applicants[i].setMinors(new String[]{inputs[7]});
                applicants[i].setTransfer(Boolean.parseBoolean(inputs[8]));
                applicants[i].setExpGradDate(df.parse(inputs[9]));
                applicants[i].setAcademicYear(inputs[10]);
                applicants[i].setEnrolledUnits(Integer.parseInt(inputs[11]));

                ++i;
            }

            scnr.close();
        }
        catch (FileNotFoundException excpt) {
            System.out.println("Error Student File Not Found");
        }
    }

    @ParameterizedTest
    @CsvFileSource(resources="/expectedMatching.csv", numLinesToSkip=1)
    void testApplicant(int i, long expected_bitfield) {
        // Run matching algorithm
        ArrayList<Scholarship> matches = MatchingEngine.match(applicants[i], scholarships);
        // C-like int of flags showing which scholarships the matching algorithm spits out
        // 000010001001 -> the 1st, 4th, and 8th scholarships are matches
        long bitfield = 0;

        // Verifying matches are as expected
        for (Scholarship match : matches) {
            for (int j = 0; j < scholarships.length; j++) {
                if (match == scholarships[j]) {
                    System.out.println("Found match");
                    bitfield |= 1 << j;
                    break;
                }
            }
        }
        assertEquals(bitfield, expected_bitfield);
    }
}
